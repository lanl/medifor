# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from medifor.v1 import analytic_pb2 as medifor_dot_v1_dot_analytic__pb2


class AnalyticStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectImageManipulation = channel.unary_unary(
                '/mediforproto.Analytic/DetectImageManipulation',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.ImageManipulationRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageManipulation.FromString,
                )
        self.DetectImageSplice = channel.unary_unary(
                '/mediforproto.Analytic/DetectImageSplice',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.ImageSpliceRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageSplice.FromString,
                )
        self.DetectVideoManipulation = channel.unary_unary(
                '/mediforproto.Analytic/DetectVideoManipulation',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.VideoManipulationRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.VideoManipulation.FromString,
                )
        self.DetectImageCameraMatch = channel.unary_unary(
                '/mediforproto.Analytic/DetectImageCameraMatch',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.ImageCameraMatchRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageCameraMatch.FromString,
                )
        self.DetectImageCameras = channel.unary_unary(
                '/mediforproto.Analytic/DetectImageCameras',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.ImageCamerasRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageCameras.FromString,
                )
        self.DetectVideoCameraMatch = channel.unary_unary(
                '/mediforproto.Analytic/DetectVideoCameraMatch',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.VideoCameraMatchRequest.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.VideoCameraMatch.FromString,
                )
        self.Kill = channel.unary_unary(
                '/mediforproto.Analytic/Kill',
                request_serializer=medifor_dot_v1_dot_analytic__pb2.Empty.SerializeToString,
                response_deserializer=medifor_dot_v1_dot_analytic__pb2.Empty.FromString,
                )


class AnalyticServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectImageManipulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectImageSplice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVideoManipulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectImageCameraMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectImageCameras(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVideoCameraMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Kill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyticServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectImageManipulation': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectImageManipulation,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageManipulationRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.ImageManipulation.SerializeToString,
            ),
            'DetectImageSplice': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectImageSplice,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageSpliceRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.ImageSplice.SerializeToString,
            ),
            'DetectVideoManipulation': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVideoManipulation,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.VideoManipulationRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.VideoManipulation.SerializeToString,
            ),
            'DetectImageCameraMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectImageCameraMatch,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageCameraMatchRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.ImageCameraMatch.SerializeToString,
            ),
            'DetectImageCameras': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectImageCameras,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.ImageCamerasRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.ImageCameras.SerializeToString,
            ),
            'DetectVideoCameraMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVideoCameraMatch,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.VideoCameraMatchRequest.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.VideoCameraMatch.SerializeToString,
            ),
            'Kill': grpc.unary_unary_rpc_method_handler(
                    servicer.Kill,
                    request_deserializer=medifor_dot_v1_dot_analytic__pb2.Empty.FromString,
                    response_serializer=medifor_dot_v1_dot_analytic__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mediforproto.Analytic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analytic(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectImageManipulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectImageManipulation',
            medifor_dot_v1_dot_analytic__pb2.ImageManipulationRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.ImageManipulation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectImageSplice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectImageSplice',
            medifor_dot_v1_dot_analytic__pb2.ImageSpliceRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.ImageSplice.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectVideoManipulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectVideoManipulation',
            medifor_dot_v1_dot_analytic__pb2.VideoManipulationRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.VideoManipulation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectImageCameraMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectImageCameraMatch',
            medifor_dot_v1_dot_analytic__pb2.ImageCameraMatchRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.ImageCameraMatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectImageCameras(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectImageCameras',
            medifor_dot_v1_dot_analytic__pb2.ImageCamerasRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.ImageCameras.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectVideoCameraMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/DetectVideoCameraMatch',
            medifor_dot_v1_dot_analytic__pb2.VideoCameraMatchRequest.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.VideoCameraMatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mediforproto.Analytic/Kill',
            medifor_dot_v1_dot_analytic__pb2.Empty.SerializeToString,
            medifor_dot_v1_dot_analytic__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
